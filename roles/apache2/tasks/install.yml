- name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_facts['os_family'] == 'Debian'
  become: yes
  become_method: sudo
  vars:
    ansible_become_password: "{{ sudo_password }}"

- name: Update homebrew cache
  homebrew:
    update_homebrew: yes
  when: ansible_facts['os_family'] == 'Darwin'

- block:

  - name: Install apache2 server
    package:
      name:
      - apache2
      state: latest

  become: "{{ 'no' if ansible_facts['os_family'] == 'Darwin' else 'yes' }}"
  become_method: sudo
  vars:
    ansible_become_password: "{{ sudo_password }}"

- block:

  - name: Ensure AcceptFilter http none is present in apache config
    lineinfile:
      path: "/etc/apache2/apache2.conf"
      line: AcceptFilter http none
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Debian'
    notify:
    - restart apache2
  
  - name: Ensure AcceptFilter http none is present in apache config
    lineinfile:
      path: "/usr/local/etc/httpd/httpd.conf"
      line: AcceptFilter http none
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Darwin'
    notify:
    - restart apache2

  - name: Ensure AcceptFilter https none is present in apache config
    lineinfile:
      path: "/etc/apache2/apache2.conf"
      line: AcceptFilter https none
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Debian'
    notify:
    - restart apache2

  - name: Ensure AcceptFilter https none is present in apache config
    lineinfile:
      path: "/usr/local/etc/httpd/httpd.conf"
      line: AcceptFilter https none
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Darwin'
    notify:
    - restart apache2

  - name: Ensure vhosts directory exists
    file:
      path: /usr/local/etc/httpd/vhosts
      state: directory
      mode: '0755'
      owner: "{{ ansible_env.USER }}"
      group: admin
    when: ansible_facts['os_family'] == 'Darwin'
    
  - name: Ensure Mac Os X include vhosts
    lineinfile:
      path: "/usr/local/etc/httpd/httpd.conf"
      line: IncludeOptional /usr/local/etc/httpd/vhosts/*.conf
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Darwin'
    notify:
    - restart apache2

  - name: Add default vhost
    synchronize:
      src: "files/000-default.conf"
      dest: "/usr/local/etc/httpd/vhosts/"
      delete: no
      perms: no
    when: ansible_facts['os_family'] == 'Darwin'

  - name: change default port to 80
    lineinfile:
      path: "/usr/local/etc/httpd/httpd.conf"
      regexp: "^Listen "
      line: Listen 80
      state: present
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Darwin'
    notify:
    - restart apache2

  - name: Enable Apache2 modules
    apache2_module:
      state: present
      name: "{{ item }}"
    loop:
      - deflate
      - mime_magic
      - expires
      - proxy
      - proxy_http
      - proxy_fcgi
      - rewrite
    tags: [ php, apache ]
    when: ansible_facts['os_family'] == 'Debian'
    notify:
    - restart apache2
  
  - name: Enable Apache2 modules
    lineinfile:
      path: /usr/local/etc/httpd/httpd.conf
      line: "LoadModule rewrite_module lib/httpd/modules/mod_{{ item }}.so"
      state: present
    loop:
      - deflate
      - mime_magic
      - expires
      - proxy
      - proxy_http
      - proxy_fcgi
      - rewrite
    tags: [ php, apache ]
    when: ansible_facts['os_family'] == 'Darwin'
    notify:
    - restart apache2

  - name: Start service apache2, if not started
    service:
      name: apache2
      state: started
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Debian'

  - name: Start service apache2, if not started
    shell: > 
      apachectl restart
    tags: [ apache ]
    when: ansible_facts['os_family'] == 'Darwin'
  
  become: yes
  become_method: sudo
  vars:
    ansible_become_password: "{{ sudo_password }}"